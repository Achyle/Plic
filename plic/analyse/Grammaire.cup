package plic.analyse;

import plic.arbre.ArbreAbstrait;
import plic.arbre.Classe;
import plic.arbre.Declaration;
import plic.arbre.ListeDeclaration;
import plic.arbre.expression.Different;
import plic.arbre.expression.Division;
import plic.arbre.expression.Egale;
import plic.arbre.expression.Expression;
import plic.arbre.expression.Inferieur;
import plic.arbre.expression.Multiplication;
import plic.arbre.expression.Somme;
import plic.arbre.expression.Soustraction;
import plic.arbre.expression.Superieur;
import plic.arbre.expression.Unaire;

action code {: 
			:}; 

parser code {:

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal String cste_ent, parenthese_ouvert, parenthese_fermer, plus, moins, fois, diviser, inf, sup, egale;
terminal String different, bool, classe, fin, pointvirgule, idf;

non terminal ArbreAbstrait SYSTEME;
non terminal Classe CLASSE;
non terminal ListeDeclaration LDECL;
non terminal Declaration DECLARATION;
non terminal Expression EXP;

precedence left bool;
precedence left inf, sup, egale, different;
precedence left plus, moins;
precedence left fois, diviser;

start with SYSTEME;

SYSTEME	::= CLASSE:c
	{: 	System.out.println("systeme"); 
		RESULT = new ArbreAbstrait(c); :};
	
CLASSE ::= classe idf:i LDECL:l fin
	{: System.out.println("classe");
	   RESULT = new Classe(l,i); :};

LDECL ::= LDECL:l DECLARATION:d
	{: 	
		System.out.println("liste declaration add");
		l.ajouterDeclaration(d);
		RESULT = l; :}
	| DECLARATION:d
	{: 	
		System.out.println("liste declaration new");
		ListeDeclaration l = new ListeDeclaration(); 
		l.ajouterDeclaration(d);
		RESULT = l; :};
	
DECLARATION ::= EXP:e pointvirgule
	{: RESULT = new Declaration(); :};

EXP ::= cste_ent:cste
	  	{: RESULT = new Unaire(Integer.parseInt(""+cste),false); :}
	| parenthese_ouvert EXP:e parenthese_fermer
	  {: RESULT = e; :}
	
	| moins EXP:e
	  {: RESULT = new Multiplication(new Unaire(-1,false),e); :}
	
	| EXP:e1 plus EXP:e2
	  {: RESULT = new Somme(e1,e2); :}
	
	| EXP:e1 moins EXP:e2
	  {: RESULT = new Soustraction(e1,e2); :}
	
	| EXP:e1 fois EXP:e2
	  {: RESULT = new Multiplication(e1,e2); :}
	
	| EXP:e1 diviser EXP:e2
	  {: RESULT = new Division(e1,e2); :}
	
	| EXP:e1 inf EXP:e2
	  {: RESULT=new Inferieur(e1,e2); :}
	
	| EXP:e1 sup EXP:e2
	  {: RESULT=new Superieur(e1,e2); :}
	
	| EXP:e1 egale EXP:e2
	  {: RESULT=new Egale(e1,e2); :}
	
	| EXP:e1 different EXP:e2
	  {: RESULT=new Different(e1,e2); :}
	
	| bool:b
	  {: RESULT=new Unaire(b=="vrai"?1:0,true); :};
