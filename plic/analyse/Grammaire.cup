package plic.analyse;

import plic.arbre.Affectation;
import plic.arbre.ArbreAbstrait;
import plic.arbre.Classe;
import plic.arbre.Declaration;
import plic.arbre.DeclarationChamps;
import plic.arbre.DeclarationConstantes;
import plic.arbre.EcrireChaine;
import plic.arbre.EcrireIdentifiant;
import plic.arbre.Lire;
import plic.arbre.ListeDeclaration;
import plic.arbre.ListeIdentifiant;
import plic.arbre.expression.Different;
import plic.arbre.expression.Division;
import plic.arbre.expression.Egale;
import plic.arbre.expression.Expression;
import plic.arbre.expression.Inferieur;
import plic.arbre.expression.Multiplication;
import plic.arbre.expression.Somme;
import plic.arbre.expression.Soustraction;
import plic.arbre.expression.Superieur;
import plic.arbre.expression.Unaire;

action code {: 
			:}; 

parser code {:

    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
        String mess = "";
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                mess = "ERREUR SYNTAXIQUE : "+(s.left+1);
            }
        }
		System.out.println(mess);
    }

    public void report_fatal_error(String message, Object info) {
        System.exit(1);
    }
:};

terminal String cste_ent, cste_chaine, parenthese_ouvert, parenthese_fermer, plus, moins, fois, diviser, inf, sup, test_egale;
terminal String test_different, bool, classe, fin, pointvirgule, idf, statut, type, virgule, ecrire, lire, egale;

non terminal ArbreAbstrait SYSTEME;
non terminal Classe CLASSE;
non terminal ListeDeclaration LDECL;
non terminal Declaration DECLARATION;
non terminal DeclarationChamps DECL_CHAMP;
non terminal DeclarationConstantes DECL_CONST;
non terminal ListeIdentifiant LIDF;
non terminal Affectation AFFECT;
non terminal Expression EXP;
non terminal Lire INSTLIRE;
non terminal DeclarationConstantes INSTECRIRE;

precedence left bool;
precedence left inf, sup, test_egale, test_different;
precedence left plus, moins;
precedence left fois, diviser;

start with SYSTEME;

SYSTEME	::= CLASSE:c
	{: RESULT = new ArbreAbstrait(c); :};
	
CLASSE ::= classe idf:i LDECL:l fin
	{: RESULT = new Classe(l,i); :}
	| classe idf:i fin
	{: RESULT = new Classe(null,i); :};

LDECL ::= LDECL:l DECLARATION:d
	{: 	l.ajouterDeclaration(d);
		RESULT = l; :}
	| DECLARATION:d
	{: 	ListeDeclaration l = new ListeDeclaration(); 
		l.ajouterDeclaration(d);
		RESULT = l; :};
	
DECLARATION ::= DECL_CHAMP:d pointvirgule
	{: RESULT = d; :}
	| DECL_CONST:d pointvirgule
	{: RESULT = d; :};
	
DECL_CHAMP ::= statut:s type:t LIDF:l 
	{: RESULT = new DeclarationChamps(s,t,l); :};

LIDF ::= LIDF:l virgule idf:i
	{: 	l.ajouterIdentifiant(i);
		RESULT = l; :}
	| idf:i
	{: 	ListeIdentifiant l = new ListeIdentifiant();
		l.ajouterIdentifiant(i);
		RESULT = l; :};
	
DECL_CONST ::= AFFECT:a
	{: RESULT = a; :}
	| INSTLIRE:i
	{: RESULT = i; :}
	| INSTECRIRE:i
	{: RESULT = i; :};
	
AFFECT ::=  idf:i egale EXP:e 
	{: RESULT = new Affectation(i,e); :}
	| idf:i1 egale idf:i2
	{: RESULT = new Affectation(i1,i2); :};
	
INSTLIRE ::= lire idf:i
	{: RESULT = new Lire(i); :};

INSTECRIRE ::= ecrire idf:i
	{: RESULT = new EcrireIdentifiant(i); :}
	| ecrire cste_chaine:c
	{: RESULT = new EcrireChaine(c); :};

EXP ::= cste_ent:cste
	  	{: RESULT = new Unaire(Integer.parseInt(""+cste),false); :}
	| parenthese_ouvert EXP:e parenthese_fermer
	  {: RESULT = e; :}
	| moins EXP:e
	  {: RESULT = new Multiplication(new Unaire(-1,false),e); :}
	| EXP:e1 plus EXP:e2
	  {: RESULT = new Somme(e1,e2); :}
	| EXP:e1 moins EXP:e2
	  {: RESULT = new Soustraction(e1,e2); :}
	| EXP:e1 fois EXP:e2
	  {: RESULT = new Multiplication(e1,e2); :}
	| EXP:e1 diviser EXP:e2
	  {: RESULT = new Division(e1,e2); :}
	| EXP:e1 inf EXP:e2
	  {: RESULT=new Inferieur(e1,e2); :}
	| EXP:e1 sup EXP:e2
	  {: RESULT=new Superieur(e1,e2); :}
	| EXP:e1 test_egale EXP:e2
	  {: RESULT=new Egale(e1,e2); :}
	| EXP:e1 test_different EXP:e2
	  {: RESULT=new Different(e1,e2); :}
	| bool:b
	  {: RESULT=new Unaire(b=="vrai"?1:0,true); :};
